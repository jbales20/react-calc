{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MyForm","props","myChangeHandler","event","nam","target","name","val","value","te","total","console","log","setState","state","bill","tip","split","this","type","min","placeholder","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"yOAsDeA,E,kDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,gBAAkB,SAACC,GAAW,IAAD,EACvBC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACnBC,EAAKN,EAAME,OAAOG,MAClBE,EAAUH,EAAI,IAAOH,EAAKK,EAC9BE,QAAQC,IAAIF,GACZ,EAAKG,UAAL,mBAAgBT,EAAMG,GAAtB,mBAA2BE,GAA3B,sBAA+BC,GAA/B,KAbA,EAAKI,MAAQ,CACXC,KAAM,KACNC,IAAK,KACLC,MAAO,MALQ,E,qDAkBjB,OACE,iCACA,oDAAuBC,KAAKJ,MAAME,IAAI,IAAME,KAAKJ,MAAMC,KAAOG,KAAKJ,MAAMG,MAAQC,KAAKJ,MAAMC,KAAKG,KAAKJ,MAAMG,SAC5G,sCACA,uBACEE,KAAK,SACLb,KAAK,OACLc,IAAI,IACJC,YAAY,IACZC,SAAUJ,KAAKhB,kBAEjB,qCACA,uBACEiB,KAAK,SACLb,KAAK,MACLc,IAAI,IACJC,YAAY,IACZC,SAAUJ,KAAKhB,kBAEjB,uCACA,uBACEiB,KAAK,SACLb,KAAK,QACLe,YAAY,IACZD,IAAI,IACJE,SAAUJ,KAAKhB,yB,GA5CFqB,IAAMC,WCSZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.592edbeb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bill: null,\n      tip: null,\n      split: null,\n    };\n  }\n  \n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let te = event.target.value;\n    let total = ((val/100) * nam)/te;\n    console.log(total)\n    this.setState({[nam]: val, te, total});\n  }\n  render() {\n    return (\n      <form>\n      <h1>Bill Per Person: ${this.state.tip/100 * this.state.bill / this.state.split + this.state.bill/this.state.split}</h1>\n      <p>Bill:</p>\n      <input\n        type='number'\n        name='bill'\n        min=\"1\"\n        placeholder='1'\n        onChange={this.myChangeHandler}\n      />\n      <p>Tip:</p>\n      <input\n        type='number'\n        name='tip'\n        min=\"1\"\n        placeholder='5'\n        onChange={this.myChangeHandler}\n      />\n      <p>Split:</p>\n      <input\n        type='number'\n        name='split'\n        placeholder='1'\n        min=\"1\"\n        onChange={this.myChangeHandler}\n      />\n      </form>\n    );\n  }\n}\n\nexport default MyForm","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}